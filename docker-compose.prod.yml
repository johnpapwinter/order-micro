name: orders-management-system-prod

services:
  postgres:
    container_name: oms-postgres-prod
    image: postgres:17
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oms-prod-network

  mongo:
    container_name: oms-mongodb-prod
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongo_prod_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oms-prod-network

  rabbitmq:
    container_name: oms-rabbitmq-prod
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oms-prod-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - oms-prod-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - oms-prod-network

  logging-service:
    container_name: oms-logging-service-prod
    build:
      context: ./logging
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: ${LOGGING_APP_NAME}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILE}
      SPRING_DATA_MONGODB_HOST: ${SPRING_DATA_MONGODB_HOST}
      SPRING_DATA_MONGODB_POST: ${MONGO_PORT}
      SPRING_DATA_MONGODB_USERNAME: ${MONGO_USERNAME}
      SPRING_DATA_MONGODB_PASSWORD: ${MONGO_PASSWORD}
      SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: ${LOGGING_MONGODB_AUTH_DB}
      SPRING_DATA_MONGODB_AUTO_INDEX_CREATION: ${SPRING_DATA_MONGODB_AUTO_INDEX_CREATION}
      MONGOCK_MIGRATION_SCAN_PACKAGE: ${MONGOCK_MIGRATION_SCAN_PACKAGE}
      MONGOCK_ENABLED: ${MONGOCK_ENABLED}
      MONGOCK_RUNNER_TYPE: ${MONGOCK_RUNNER_TYPE}
      RABBITMQ_QUEUE_LOGGING_REQUEST: ${RABBITMQ_QUEUE_LOGGING_REQUEST}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    networks:
      - oms-prod-network

  order-service:
    container_name: oms-order-service-prod
    build:
      context: ./orders
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      logging-service:
        condition: service_started
    environment:
      SPRING_APPLICATION_NAME: ${SPRING_APPLICATION_NAME}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILE}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: ${SPRING_DATASOURCE_DRIVER_CLASS_NAME}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_DATABASE_PLATFORM: ${SPRING_JPA_DATABASE_PLATFORM}
      SPRING_JPA_HIBERNATE_DDL_AUTO: ${SPRING_JPA_HIBERNATE_DDL_AUTO}
      SPRING_LIQUIBASE_ENABLED: ${SPRING_LIQUIBASE_ENABLED}
      SPRING_LIQUIBASE_CHANGE_LOG: ${SPRING_LIQUIBASE_CHANGE_LOG}
      APP_JWT_SECRET: ${JWT_SECRET}
      APP_JWT_ISSUER: ${JWT_ISSUER}
      APP_JWT_EXPIRATION: ${JWT_EXPIRATION}
      APP_FEIGN_NAMES_LOGGING_SERVICE_NAME: ${APP_FEIGN_NAMES_LOGGING_SERVICE_NAME}
      APP_FEIGN_NAMES_LOGGING_SERVICE_URL: ${APP_FEIGN_NAMES_LOGGING_SERVICE_URL}
      TASK_SCHEDULE_CRON: ${TASK_SCHEDULE_CRON}
      RABBITMQ_QUEUE_LOGGING_REQUEST: ${RABBITMQ_QUEUE_LOGGING_REQUEST}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: ${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE}
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: ${MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS}
      MANAGEMENT_ENDPOINT_METRICS_ENABLED: ${MANAGEMENT_ENDPOINT_METRICS_ENABLED}
      MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED: ${MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED}
      MANAGEMENT_ENDPOINTS_WEB_BASE_PATH: ${MANAGEMENT_ENDPOINTS_WEB_BASE_PATH}
    networks:
      - oms-prod-network

volumes:
  postgres_prod_data:
    name: oms-postgres-prod-data
  mongo_prod_data:
    name: oms-mongodb-prod-data
  grafana_data:
    name: oms-grafana-prod-data

networks:
  oms-prod-network:
    name: oms-prod-network
    driver: bridge