name: orders-management-system

services:
  postgres:
    container_name: oms-postgres
    image: postgres:17
    environment:
      POSTGRES_USER: order_user
      POSTGRES_PASSWORD: orderUs3r!
      POSTGRES_DB: oms_db
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U public_user -d public_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oms-dev-network


  mongo:
    container_name: oms-mongodb
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: order_user
      MONGO_INITDB_ROOT_PASSWORD: orderUs3r!
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oms-dev-network


  rabbitmq:
    container_name: oms-rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: order_user
      RABBITMQ_DEFAULT_PASS: orderUs3r!
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oms-dev-network


  grafana:
    container_name: oms-grafana
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/dashboards
    networks:
      - oms-dev-network

  prometheus:
    container_name: oms-prometheus
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - oms-dev-network

  loki:
    container_name: loki
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - oms-dev-network

  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    volumes:
      - ./logs:/var/log
      - ./promtail:/etc/promtail
    command: -config.file=/etc/promtail/config.yml
    networks:
      - oms-dev-network

  logging-service:
    container_name: oms-logging-service
    build:
      context: ./logging
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: logging
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATA_MONGODB_HOST: mongo
      SPRING_DATA_MONGODB_POST: 27017
      SPRING_DATA_MONGODB_USERNAME: order_user
      SPRING_DATA_MONGODB_PASSWORD: orderUs3r!
      SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: admin
      SPRING_DATA_MONGODB_AUTO_INDEX_CREATION: "true"
      MONGOCK_MIGRATION_SCAN_PACKAGE: com.example.logging.migrations
      MONGOCK_ENABLED: "true"
      MONGOCK_RUNNER_TYPE: initializingbean
      RABBITMQ_QUEUE_LOGGING_REQUEST: logging.request
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: order_user
      SPRING_RABBITMQ_PASSWORD: orderUs3r!
    networks:
      - oms-dev-network


  order-service:
    container_name: oms-order-service
    build:
      context: ./orders
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      logging-service:
        condition: service_started
    environment:
      SPRING_APPLICATION_NAME: orders
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/public_db
      SPRING_DATASOURCE_USERNAME: order_user
      SPRING_DATASOURCE_PASSWORD: orderUs3r!
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      SPRING_LIQUIBASE_ENABLED: "true"
      SPRING_LIQUIBASE_CHANGE_LOG: classpath:/db.changelog/db.changelog-dev.xml
      APP_JWT_SECRET: super-secret
      APP_JWT_ISSUER: oms
      APP_JWT_EXPIRATION: 3600000
      APP_FEIGN_NAMES_LOGGING_SERVICE_NAME: logging
      APP_FEIGN_NAMES_LOGGING_SERVICE_URL: http://logging-service:8081
      TASK_SCHEDULE_CRON: "0 */2 * * * *"
      RABBITMQ_QUEUE_LOGGING_REQUEST: logging.request
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: order_user
      SPRING_RABBITMQ_PASSWORD: orderUs3r!
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: *
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
      MANAGEMENT_ENDPOINT_METRICS_ENABLED: true
      MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED: true
      MANAGEMENT_ENDPOINTS_WEB_BASE_PATH: /actuator
      LOGGING_FILE_PATH: ./logs
      LOGGING_FILE_NAME: ./logs/spring-boot.log
      LOGGING_PATTERN_FILE: %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
    networks:
      - oms-dev-network


volumes:
  postgres_data:
  mongo_data:
  grafana_data:

networks:
  oms-dev-network:
